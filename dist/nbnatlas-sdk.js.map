{"version":3,"file":"nbnatlas-sdk.js","sources":["../src/util/index.js","../src/config/config.js","../src/config/layers.js","../src/config/species-list.js","../src/services/species-ws.js","../src/validation/error-messages.js","../src/validation/index.js","../src/services/records-ws.js","../src/services/lists-ws.js","../src/core/places.js","../src/core/bbg.js"],"sourcesContent":["/** \r\n     * @private\r\n     */\r\n export async function getJson(url) {\r\n    const controller = new AbortController();\r\n    setTimeout(() => controller.abort(), 10000);\r\n\r\n    const response = await fetch(url, { signal: controller.signal });\r\n\r\n    if (response.status >= 400) {\r\n        return Promise.reject({\r\n            status: response.status,\r\n            message: response.statusText,\r\n            body: response.data\r\n        });\r\n    }\r\n    if (response.status >= 200 && response.status <= 202) {\r\n        const json = await response.json();\r\n        return json;\r\n    }\r\n    return {};\r\n}","\r\n/**\r\n * @private\r\n */\r\nexport const CONFIG = {\r\n    URL_RECORDS_WS: 'https://records-ws.nbnatlas.org',\r\n    URL_SPECIES_WS: 'https://species-ws.nbnatlas.org',\r\n    URL_LISTS_WS: 'https://lists.nbnatlas.org'\r\n}\r\n","/** \r\n * Layer ID's\r\n * @memberof NBNAtlas\r\n * @property {string} BEAUTIFUL_BURIAL_GROUNDS\r\n*/\r\nexport const LAYERS = {\r\n    BEAUTIFUL_BURIAL_GROUNDS : \"cl273\",\r\n}\r\n\r\n\r\n/**\r\n * @typedef {Object}\r\n * @memberof NBNAtlas\r\n * @name SpeciesCountByGroup\r\n * @property {string} speciesGroup - The species group\r\n * @property {number} speciesCount - The number of species counted\r\n * @property {number} selectedSpeciesCount - The number of species counted that are of selected interest \r\n */\r\n\r\n/**\r\n * @typedef {Object}\r\n * @memberof NBNAtlas\r\n * @name OccurrenceCount\r\n * @property {string} scientificName\r\n * @property {string} commonName\r\n * @property {string} taxonGuid\r\n * @property {number} count\r\n * @property {boolean} sensitiveInEngland - true if species is sensitive in England\r\n * @property {boolean} sensitiveInWales - true if species is sensitive in Wales\r\n */\r\n\r\n/**\r\n * @typedef {Object}\r\n * @memberof NBNAtlas\r\n * @name Place\r\n * @property {string} id\r\n * @property {number} name\r\n */\r\n\r\n/**\r\n * @typedef {Object}\r\n * @memberof NBNAtlas\r\n * @name BBGPlace\r\n * @property {string} assetID\r\n * @property {number} name\r\n */","/** \r\n * Species List ID's\r\n * @memberof NBNAtlas\r\n * @property {string} BEAUTIFUL_BURIAL_GROUNDS_SEEK_ADVICE\r\n * @property {string} BEAUTIFUL_BURIAL_GROUNDS_DIGEST_TABLE\r\n * @property {string} SENSITIVE_IN_ENGLAND\r\n * @property {string} SENSITIVE_IN_WALES\r\n*/\r\nexport const SPECIES_LIST = {\r\n    BEAUTIFUL_BURIAL_GROUNDS_SEEK_ADVICE: \"dr2504\",\r\n    BEAUTIFUL_BURIAL_GROUNDS_DIGEST_TABLE: \"dr2492\",\r\n    SENSITIVE_IN_ENGLAND: \"dr2058\",\r\n    SENSITIVE_IN_WALES: \"dr2067\"\r\n}","import { getJson } from '../util/index'\r\nimport { CONFIG } from '../config/index'\r\n\r\n/**\r\n* @private\r\n*/\r\nexport class SpeciesWS {\r\n\r\n    async getBBGPlace(placeName) {\r\n        let url = this._buildGetPlaceUrl(placeName);\r\n        let json = await this._getJson(url);\r\n        return this._buildBBGPlaceDTO(json);\r\n    }\r\n\r\n\r\n\r\n    /**\r\n      * @private\r\n      */\r\n    _buildBBGPlaceDTO(json) {\r\n        //let result = json.searchResults?.results?.[0];\r\n        let result = json.searchResults && json.searchResults.results && json.searchResults.results[0] ?\r\n            json.searchResults.results[0] : null;\r\n        return result ? {\r\n            assetID: result.bbg_unique_s,\r\n            name: result.bbg_name_s\r\n        }\r\n            : [];\r\n    }\r\n\r\n    /**\r\n      * @private\r\n      */\r\n    _buildGetPlaceUrl(placeName) {\r\n        return `${CONFIG.URL_SPECIES_WS}/search?fq=idxtype:REGIONFEATURED&fq=name:${encodeURIComponent('\"' + placeName + '\"')}`;\r\n    }\r\n\r\n\r\n    /** @private */\r\n    _getJson(url) {\r\n        return getJson(url)\r\n    }\r\n\r\n}\r\n\r\n","\r\n/**\r\n * @private\r\n */\r\n export const ERROR_MESSAGES = {\r\n    MISSING_PLACE_NAME: \"Missing place name\",\r\n    MISSING_SPECIES_LIST_ID: \"Missing species list id\"\r\n}\r\n","\r\n/**\r\n    * @private\r\n*/\r\nexport function rejectInvalidRequest(message) {\r\n    return Promise.reject({\r\n        status: \"INVALID\",\r\n        message: message\r\n    });\r\n}\r\n\r\nexport * from  './error-messages'","import { getJson } from '../util/index'\r\nimport { CONFIG } from '../config/index'\r\n\r\n/**\r\n* @private\r\n*/\r\nexport class RecordsWS {\r\n\r\n\r\n    async getSpeciesCountByGroup({layerId, placeName}) {\r\n        let url = `${CONFIG.URL_RECORDS_WS}/explore/groups?q=*:*&fq=${layerId}:${encodeURIComponent('\"' + placeName + '\"')}&fq=-occurrence_status:absent`;\r\n        let json = await this._getJson(url);\r\n        return this._buildSpeciesCountByGroupDTO(json);\r\n    }\r\n\r\n    async getSpeciesCountByGroupForSpeciesList({layerId, placeName, speciesListId}) {\r\n        let url = `${CONFIG.URL_RECORDS_WS}/explore/groups?q=*:*&fq=${layerId}:${encodeURIComponent('\"' + placeName + '\"')}&fq=-occurrence_status:absent`;\r\n        url = `${url}&fq=species_list_uid:${speciesListId}`;\r\n        let json = await this._getJson(url);\r\n        return this._buildSpeciesCountByGroupDTO(json);\r\n    }\r\n\r\n    async getOccurrenceCount({layerId, placeName}) {\r\n        const url = `${CONFIG.URL_RECORDS_WS}/occurrences/search?q=${layerId}:${encodeURIComponent('\"' + placeName + '\"')}&facets=names_and_lsid&pageSize=0&flimit=-1`;\r\n        const json = await this._getJson(url);\r\n        return this._buildOccurrenceCountDTO(json)\r\n    }\r\n\r\n    async getOccurrenceCountForSpeciesList({layerId, placeName, speciesListId}) {\r\n        const url = `${CONFIG.URL_RECORDS_WS}/occurrences/search?q=${layerId}:${encodeURIComponent('\"' + placeName + '\"')}&facets=names_and_lsid&pageSize=0&flimit=-1&fq=-occurrence_status:absent&fq=species_list_uid:${speciesListId}`;\r\n        const json = await this._getJson(url);        \r\n        return this._buildOccurrenceCountDTO(json)\r\n    }\r\n\r\n    /**\r\n    * @private\r\n    */\r\n    _buildSpeciesCountByGroupDTO(json) {\r\n        return json;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _buildOccurrenceCountDTO(json) {\r\n        //let result = json.facetResults?.[0]?.fieldResult?.map(it => {          \r\n        let result = json.facetResults && json.facetResults[0] && json.facetResults[0].fieldResult ?\r\n            json.facetResults[0].fieldResult.map(it => {\r\n                const label = it.label.split('|');\r\n                return {\r\n                    ...it,\r\n                    additional: {\r\n                        scientificName: label[0],\r\n                        commonName: label[2],\r\n                        taxonGuid: label[1]\r\n                    }\r\n                };\r\n            }) : [];\r\n\r\n        return result;\r\n    }\r\n\r\n    /** @private */\r\n    _getJson(url) {\r\n        return getJson(url)\r\n    }\r\n}","import { getJson } from '../util/index'\r\nimport { CONFIG } from '../config/index'\r\n\r\n/**\r\n* @private\r\n*/\r\nexport class ListsWS {\r\n\r\n    async getSpeciesList(speciesListId) {\r\n        let url = `${CONFIG.URL_LISTS_WS}/ws/speciesListItems/${speciesListId}`;\r\n        let json = await getJson(url);\r\n        return this._buildSpeciesListDTO(json);\r\n    }\r\n\r\n\r\n    /**\r\n    * @private\r\n    */\r\n    _buildSpeciesListDTO(json) {\r\n        return json;\r\n    }\r\n\r\n}","import { RecordsWS } from '../services/records-ws'\r\nimport { ListsWS } from '../services/lists-ws'\r\nimport {rejectInvalidRequest, ERROR_MESSAGES} from '../validation/index'\r\nimport {getJson} from '../util/index'\r\nimport {CONFIG, SPECIES_LIST} from '../config/index'\r\n\r\n/**\r\n * @classdesc Represents the NBN Places SDK. In Beta!!\r\n * @memberof NBNAtlas\r\n */\r\n export class Places {\r\n\r\n    /**\r\n     * Create a place.\r\n     * @param {number} layerId - The NBN layer id.\r\n    */\r\n    constructor(layerId) {\r\n        this.layerId = layerId;\r\n        this.recordsWS = new RecordsWS();\r\n        this.listsWS = new ListsWS();\r\n    }\r\n\r\n    /**\r\n     * Returns the species count grouped by species group.\r\n     * @async\r\n     * @example\r\n     * NBNAtlas.places(NBNAtlas.LAYERS.BEAUTIFUL_BURIAL_GROUNDS).getSpeciesCountByGroup('Croydon Cemetery', NBNAtlas.SPECIES_LIST.BEAUTIFUL_BURIAL_GROUNDS_SEEK_ADVICE)\r\n     *\r\n     * @param {string} placeName - The unique name of the place\r\n     * @param {string} [selectedspeciesListId] - The id of a species list for which a grouped count is also returned.\r\n     * @return {Promise<Array<NBNAtlas.typedefs.SpeciesCountByGroup>>}\r\n     */\r\n    async getSpeciesCountByGroup(placeName, selectedspeciesListId) {\r\n        if (!placeName) {\r\n            return rejectInvalidRequest(ERROR_MESSAGES.MISSING_PLACE_NAME);\r\n        }\r\n       \r\n        const speciesCountByGroupDTO = await this.recordsWS.getSpeciesCountByGroup({layerId:this.layerId, placeName});\r\n\r\n        let selectedSpeciesCountByGroupDTO = selectedspeciesListId ? \r\n            await this.recordsWS.getSpeciesCountByGroupForSpeciesList({layerId:this.layerId, placeName, speciesListId:selectedspeciesListId}) : [];\r\n      \r\n        return this._buildSpeciesCountByGroupResult(speciesCountByGroupDTO, selectedSpeciesCountByGroupDTO);\r\n    }\r\n\r\n    /**\r\n     * Returns the occurrence counts.\r\n     * @example\r\n     * NBNAtlas.places(NBNAtlas.LAYERS.BEAUTIFUL_BURIAL_GROUNDS).getOccurrenceCount('Argyll Biological Records Centre')\r\n     *\r\n     * @param {string} placeName - The unique name of the place.\r\n     * @return {Promise<Array<NBNAtlas.typedefs.OccurrenceCount>>}\r\n     */\r\n    async getOccurrenceCount(placeName) {\r\n        if (!placeName) {\r\n            return rejectInvalidRequest(ERROR_MESSAGES.MISSING_PLACE_NAME);\r\n        }\r\n        \r\n        let result = [];\r\n        const occurrenceCountDTO = await this.recordsWS.getOccurrenceCount({layerId:this.layerId, placeName});\r\n        if (occurrenceCountDTO) {\r\n            const sensitiveInWalesDTO = await this.listsWS.getSpeciesList(SPECIES_LIST.SENSITIVE_IN_WALES);\r\n            const sensitiveInEnglandDTO = await this.listsWS.getSpeciesList(SPECIES_LIST.SENSITIVE_IN_ENGLAND);\r\n\r\n            result = this._buildOccurrenceCountResult(occurrenceCountDTO, sensitiveInWalesDTO, sensitiveInEnglandDTO);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n\r\n    /**\r\n    * Returns the occurrence counts for a species list.\r\n    * @async\r\n    * @example\r\n    * NBNAtlas.places(NBNAtlas.LAYERS.BEAUTIFUL_BURIAL_GROUNDS).getOccurrenceCount('Argyll Biological Records Centre')\r\n    *\r\n    * @param {string} placeName - The unique name of the place.\r\n    * @param {string} speciesListId - The species list id.\r\n    * @return {Promise<Array<NBNAtlas.typedefs.OccurrenceCount>>}\r\n    */\r\n    async getOccurrenceCountForSpeciesList(placeName, speciesListId) {\r\n        if (!placeName) {\r\n            return rejectInvalidRequest(ERROR_MESSAGES.MISSING_PLACE_NAME);\r\n        }\r\n        if (!speciesListId) {\r\n            return rejectInvalidRequest(ERROR_MESSAGES.MISSING_SPECIES_LIST_ID);\r\n        }\r\n        const speciesListDTO = await this.listsWS.getSpeciesList(speciesListId);\r\n\r\n        let result = [];\r\n        const occurrenceCountDTO = await this.recordsWS.getOccurrenceCountForSpeciesList({layerId:this.layerId, placeName, speciesListId});\r\n     \r\n        if (occurrenceCountDTO) {\r\n            const sensitiveInWalesDTO = await this.listsWS.getSpeciesList(SPECIES_LIST.SENSITIVE_IN_WALES);\r\n            const sensitiveInEnglandDTO = await this.listsWS.getSpeciesList(SPECIES_LIST.SENSITIVE_IN_ENGLAND);\r\n\r\n            result = this._buildOccurrenceCountForSpeciesListResult(speciesListDTO, occurrenceCountDTO, sensitiveInWalesDTO, sensitiveInEnglandDTO);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _buildSpeciesCountByGroupResult(speciesCountByGroupDTO, selectedSpeciesCountByGroupDTO) {\r\n        const map = new Map();\r\n\r\n        speciesCountByGroupDTO.forEach(it => map.set(it.name,\r\n            {\r\n                speciesGroup: it.name,\r\n                speciesCount: it.speciesCount,\r\n                selectedSpeciesCount: 0\r\n            }\r\n        ));\r\n\r\n        selectedSpeciesCountByGroupDTO.forEach(it => {\r\n            let val = map.get(it.name);\r\n\r\n            if (!val) {\r\n                map.set(it.name, {\r\n                    speciesGroup: it.name,\r\n                    speciesCount: 0,\r\n                    selectedSpeciesCount: it.speciesCount\r\n                });\r\n            } else {\r\n                val = {\r\n                    ...val,\r\n                    selectedSpeciesCount: it.speciesCount\r\n                };\r\n            }\r\n\r\n        });\r\n\r\n        return [...map.values()];\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _buildOccurrenceCountResult(occurrenceCountDTO, sensitiveInEnglandDTO, sensitiveInWalesDTO) {\r\n        if (!occurrenceCountDTO) {\r\n            return {}\r\n        }\r\n        const england = this._sensitiveSpeciesJSONToMap(sensitiveInEnglandDTO);\r\n        const wales = this._sensitiveSpeciesJSONToMap(sensitiveInWalesDTO);\r\n        return occurrenceCountDTO.map(it => (\r\n            {\r\n                scientificName: it.additional.scientificName,\r\n                commonName: it.additional.commonName,\r\n                taxonGuid: it.additional.taxonGuid,\r\n                count: it.count,\r\n                sensitiveInEngland: england[it.additional.taxonGuid] ? true : false,\r\n                sensitiveInWales: wales[it.additional.taxonGuid] ? true : false\r\n            }\r\n        ));\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _buildOccurrenceCountForSpeciesListResult(speciesListDTO, occurrenceCountDTO, sensitiveInEnglandDTO, sensitiveInWalesDTO) {\r\n        if (!occurrenceCountDTO) {\r\n            return {}\r\n        }\r\n        const england = this._sensitiveSpeciesJSONToMap(sensitiveInEnglandDTO);\r\n        const wales = this._sensitiveSpeciesJSONToMap(sensitiveInWalesDTO);\r\n        return speciesListDTO.map(it => (\r\n            {\r\n                scientificName: it.scientificName,\r\n                commonName: it.commonName,\r\n                taxonGuid: it.lsid,\r\n                count: this._getOccurrenceCount(it.lsid, occurrenceCountDTO),\r\n                sensitiveInEngland: england[it.lsid] ? true : false,\r\n                sensitiveInWales: wales[it.lsid] ? true : false\r\n            }\r\n        ));\r\n    }\r\n\r\n    /**\r\n    * @private \r\n    */\r\n    _getOccurrenceCount(taxonGuid, occurrenceCountDTO) {\r\n        let count = 0;\r\n        occurrenceCountDTO.some(it => {\r\n            if (it.additional.taxonGuid === taxonGuid) {\r\n                count = it.count;\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n        return count;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _sensitiveSpeciesJSONToMap(json) {\r\n        return json.reduce((map, obj) => {\r\n            map[obj.lsid] = obj;\r\n            return map;\r\n        }, {});\r\n    }\r\n\r\n   \r\n\r\n}\r\n\r\nexport var places = function (layerId) {\r\n\treturn new Places(layerId);\r\n};\r\n","import { SpeciesWS } from '../services/species-ws'\r\nimport { rejectInvalidRequest, ERROR_MESSAGES } from '../validation/index'\r\nimport { SPECIES_LIST, LAYERS } from '../../src/config/index'\r\nimport { Places } from './places'\r\n\r\n/**\r\n * @classdesc Represents the Beautiful Burial Grounds SDK.\r\n * @memberof NBNAtlas\r\n */\r\nexport class BBG {\r\n\r\n    constructor() {\r\n        this.places = new Places(LAYERS.BEAUTIFUL_BURIAL_GROUNDS)\r\n        this.speciesWS = new SpeciesWS();\r\n    }\r\n\r\n    /**\r\n     * @description Returns the seek advice data.\r\n     * @async\r\n     * @example\r\n     * NBNAtlas.bbg.getSeekAdviceData('Croydon Cemetery')\r\n     * \r\n     * @param {string} placeName - The unique name of the place\r\n     * @return {Promise<Array<NBNAtlas.OccurrenceCount>>}\r\n     *   \r\n     */\r\n    async getSeekAdviceData(placeName) {\r\n        return this.places.getOccurrenceCountForSpeciesList(placeName, SPECIES_LIST.BEAUTIFUL_BURIAL_GROUNDS_SEEK_ADVICE)\r\n    }\r\n\r\n    /**\r\n     * @description Returns the digest table data.\r\n     * @async\r\n     * @example\r\n     * NBNAtlas.bbg.getDigestTableData('Croydon Cemetery')\r\n     *\r\n     * @param {string} placeName - The unique name of the place\r\n     * @return {Promise<Array<NBNAtlas.SpeciesCountByGroup>>}\r\n    */\r\n    async getDigestTableData(placeName) {\r\n        return this.places.getSpeciesCountByGroup(placeName, SPECIES_LIST.BEAUTIFUL_BURIAL_GROUNDS_DIGEST_TABLE)\r\n    }\r\n\r\n    /**\r\n     * @description Returns a BBG site or place.\r\n     * @async\r\n     * @example\r\n     * NBNAtlas.bbg.getPlace('Baildon: St James')\r\n     *\r\n     * @param {string} placeName - The unique name of the place\r\n     * @return {Promise<NBNAtlas.BBGPlace>}\r\n    */\r\n    async getPlace(placeName) {\r\n        if (!placeName) {\r\n            return rejectInvalidRequest(ERROR_MESSAGES.MISSING_PLACE_NAME);\r\n        }\r\n        return await this.speciesWS.getBBGPlace(placeName);\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport const bbg = new BBG();"],"names":["async","getJson","url","controller","AbortController","setTimeout","abort","response","fetch","signal","status","Promise","reject","message","statusText","body","data","json","CONFIG","URL_RECORDS_WS","URL_SPECIES_WS","URL_LISTS_WS","LAYERS","BEAUTIFUL_BURIAL_GROUNDS","SPECIES_LIST","BEAUTIFUL_BURIAL_GROUNDS_SEEK_ADVICE","BEAUTIFUL_BURIAL_GROUNDS_DIGEST_TABLE","SENSITIVE_IN_ENGLAND","SENSITIVE_IN_WALES","SpeciesWS","[object Object]","placeName","this","_buildGetPlaceUrl","_getJson","_buildBBGPlaceDTO","result","searchResults","results","assetID","bbg_unique_s","name","bbg_name_s","encodeURIComponent","ERROR_MESSAGES","rejectInvalidRequest","RecordsWS","layerId","_buildSpeciesCountByGroupDTO","speciesListId","_buildOccurrenceCountDTO","facetResults","fieldResult","map","it","label","split","additional","scientificName","commonName","taxonGuid","ListsWS","_buildSpeciesListDTO","Places","recordsWS","listsWS","selectedspeciesListId","speciesCountByGroupDTO","getSpeciesCountByGroup","selectedSpeciesCountByGroupDTO","getSpeciesCountByGroupForSpeciesList","_buildSpeciesCountByGroupResult","occurrenceCountDTO","getOccurrenceCount","sensitiveInWalesDTO","getSpeciesList","sensitiveInEnglandDTO","_buildOccurrenceCountResult","speciesListDTO","getOccurrenceCountForSpeciesList","_buildOccurrenceCountForSpeciesListResult","Map","forEach","set","speciesGroup","speciesCount","selectedSpeciesCount","val","get","values","england","_sensitiveSpeciesJSONToMap","wales","count","sensitiveInEngland","sensitiveInWales","lsid","_getOccurrenceCount","some","reduce","obj","BBG","places","speciesWS","getBBGPlace","bbg"],"mappings":"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"}