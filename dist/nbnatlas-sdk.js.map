{"version":3,"file":"nbnatlas-sdk.js","sources":["../src/util/index.js","../src/config/config.js","../src/config/layers.js","../src/config/species-list.js","../src/services/species-ws.js","../src/validation/error-messages.js","../src/validation/index.js","../src/services/records-ws.js","../src/services/lists-ws.js","../src/core/places.js","../src/core/bbg.js"],"sourcesContent":["/** \n     * @private\n     */\n export async function getJson(url) {\n    const controller = new AbortController();\n    setTimeout(() => controller.abort(), 10000);\n\n    const response = await fetch(url, { signal: controller.signal });\n\n    if (response.status >= 400) {\n        return Promise.reject({\n            status: response.status,\n            message: response.statusText,\n            body: response.data\n        });\n    }\n    if (response.status >= 200 && response.status <= 202) {\n        const json = await response.json();\n        return json;\n    }\n    return {};\n}\n\nexport function encodeAndJoin(items, separator = \" OR \"){\n    let encodedItems= items.map(it => encodeURIComponent('\"' + it + '\"'));\n    return encodedItems.join(\"OR\");\n}","\n/**\n * @private\n */\nexport const CONFIG = {\n    URL_RECORDS_WS: 'https://records-ws.nbnatlas.org',\n    URL_SPECIES_WS: 'https://species-ws.nbnatlas.org',\n    URL_LISTS_WS: 'https://lists.nbnatlas.org'\n}\n","/** \n * Layer ID's\n * @memberof NBNAtlas\n * @property {string} BEAUTIFUL_BURIAL_GROUNDS\n*/\nexport const LAYERS = {\n    BEAUTIFUL_BURIAL_GROUNDS : \"cl273\",\n}\n\n\n/**\n * @typedef {Object}\n * @memberof NBNAtlas\n * @name SpeciesCountByGroup\n * @property {string} speciesGroup - The species group\n * @property {number} speciesCount - The number of species counted\n * @property {number} selectedSpeciesCount - The number of species counted that are of selected interest \n */\n\n/**\n * @typedef {Object}\n * @memberof NBNAtlas\n * @name OccurrenceCount\n * @property {string} scientificName\n * @property {string} commonName\n * @property {string} taxonGuid\n * @property {number} count\n * @property {boolean} sensitiveInEngland - true if species is sensitive in England\n * @property {boolean} sensitiveInWales - true if species is sensitive in Wales\n */\n\n/**\n * @typedef {Object}\n * @memberof NBNAtlas\n * @name Place\n * @property {string} id\n * @property {number} name\n */\n\n/**\n * @typedef {Object}\n * @memberof NBNAtlas\n * @name BBGPlace\n * @property {string} assetID\n * @property {number} name\n */","/** \n * Species List ID's\n * @memberof NBNAtlas\n * @property {string} BEAUTIFUL_BURIAL_GROUNDS_SEEK_ADVICE\n * @property {string} BEAUTIFUL_BURIAL_GROUNDS_DIGEST_TABLE\n * @property {string} SENSITIVE_IN_ENGLAND\n * @property {string} SENSITIVE_IN_WALES\n*/\nexport const SPECIES_LIST = {\n    BEAUTIFUL_BURIAL_GROUNDS_SEEK_ADVICE: \"dr2504\",\n    BEAUTIFUL_BURIAL_GROUNDS_DIGEST_TABLE: \"dr2492\",\n    SENSITIVE_IN_ENGLAND: \"dr2058\",\n    SENSITIVE_IN_WALES: \"dr2067\"\n}","import { getJson } from '../util/index.js'\nimport { CONFIG } from '../config/index.js'\n\n/**\n* @private\n*/\nexport class SpeciesWS {\n\n    async getBBGPlace(placeName) {\n        let url = this._buildGetPlaceUrl(placeName);\n        let json = await this._getJson(url);\n        return this._buildBBGPlaceDTO(json);\n    }\n\n\n    async getBBGPlacesForAssetID(assetID) {\n        let url = `${CONFIG.URL_SPECIES_WS}/search?fq=idxtype:REGIONFEATURED&fq=id_s:${assetID}`;;\n        let json = await this._getJson(url);\n        return this._buildBBGAssetDTO(json);\n    }\n\n\n\n    /**\n      * @private\n      */\n    _buildBBGPlaceDTO(json) {\n        //let result = json.searchResults?.results?.[0];\n        let result = json.searchResults && json.searchResults.results && json.searchResults.results[0] ?\n            json.searchResults.results[0] : null;\n        return result ? {\n            assetID: result.id_s,\n            name: result.bbg_name_s\n        }\n            : [];\n    }\n\n    _buildBBGAssetDTO(json) {\n        //let result = json.searchResults?.results?.[0];\n        let result = json.searchResults && json.searchResults.results && json.searchResults.results.length>0 ?\n            json.searchResults.results : null;\n        return result ? {\n                assetID:result[0].id_s,\n                assetName:result[0].name_s,\n                places:result.map(it=>it.bbg_name_s)\n            }\n            : {};\n    }\n\n    /**\n      * @private\n      */\n    _buildGetPlaceUrl(placeName) {\n        return `${CONFIG.URL_SPECIES_WS}/search?fq=idxtype:REGIONFEATURED&fq=name:${encodeURIComponent('\"' + placeName + '\"')}`;\n    }\n\n\n    /** @private */\n    _getJson(url) {\n        return getJson(url)\n    }\n\n}\n\n","\n/**\n * @private\n */\n export const ERROR_MESSAGES = {\n    MISSING_PLACE_NAME: \"Missing place name\",\n    MISSING_SPECIES_LIST_ID: \"Missing species list id\",\n    MISSING_ASSET_ID: \"Missing asset id\",\n}\n","\n/**\n    * @private\n*/\nexport function rejectInvalidRequest(message) {\n    return Promise.reject({\n        status: \"INVALID\",\n        message: message\n    });\n}\n\nexport * from  './error-messages.js'","import { getJson, encodeAndJoin } from '../util/index.js'\nimport { CONFIG } from '../config/index.js'\n\n/**\n* @private\n*/\nexport class RecordsWS {\n\n\n    async getSpeciesCountByGroup({layerId, placeName}) {\n        if (typeof placeName === 'string'){\n            placeName = [placeName];\n        }\n        let url = `${CONFIG.URL_RECORDS_WS}/explore/groups?q=*:*&fq=${layerId}:(${encodeAndJoin(placeName)})&fq=-occurrence_status:absent`;\n        let json = await this._getJson(url);\n        return this._buildSpeciesCountByGroupDTO(json);\n    }\n\n    async getSpeciesCountByGroupForSpeciesList({layerId, placeName, speciesListId}) {\n        if (typeof placeName === 'string'){\n            placeName = [placeName];\n        }\n        let url = `${CONFIG.URL_RECORDS_WS}/explore/groups?q=*:*&fq=${layerId}:(${encodeAndJoin(placeName)})&fq=-occurrence_status:absent`;\n        url = `${url}&fq=species_list_uid:${speciesListId}`;\n        let json = await this._getJson(url);\n        return this._buildSpeciesCountByGroupDTO(json);\n    }\n\n    async getOccurrenceCount({layerId, placeName}) {\n        if (typeof placeName === 'string'){\n            placeName = [placeName];\n        }\n        const url = `${CONFIG.URL_RECORDS_WS}/occurrences/search?q=${layerId}:(${encodeAndJoin(placeName)})&facets=names_and_lsid&pageSize=1&flimit=-1\n                                &fq=-occurrence_status:absent&sort=year&dir=desc&fl=year`;\n        const json = await this._getJson(url);\n        return this._buildOccurrenceCountDTO(json)\n    }\n\n    async getOccurrenceCountForSpeciesList({layerId, placeName, speciesListId}) {\n        if (typeof placeName === 'string'){\n            placeName = [placeName];\n        }\n        const url = `${CONFIG.URL_RECORDS_WS}/occurrences/search?q=${layerId}:(${encodeAndJoin(placeName)})&facets=names_and_lsid&pageSize=1&flimit=-1\n                            &fq=-occurrence_status:absent&fq=species_list_uid:${speciesListId}&sort=year&dir=desc&fl=year`;\n\n        const json = await this._getJson(url);\n        return this._buildOccurrenceCountDTO(json)\n    }\n\n    /**\n    * @private\n    */\n    _buildSpeciesCountByGroupDTO(json) {\n        return json;\n    }\n\n    /**\n     * @private\n     */\n    _buildOccurrenceCountDTO(json) {\n        //let result = json.facetResults?.[0]?.fieldResult?.map(it => {\n        //TODO let year = json.occurrences && json.occurrences[0] && json.occurrences[0].year ? json.occurrences[0].year : -1;\n        let result = json.facetResults && json.facetResults[0] && json.facetResults[0].fieldResult ?\n            json.facetResults[0].fieldResult.map(it => {\n                const label = it.label.split('|');\n                return {\n                    ...it,\n                    additional: {\n                        scientificName: label[0],\n                        commonName: label[2],\n                        taxonGuid: label[1]\n                    }\n                };\n            }) : [];\n\n        return result;\n    }\n\n    /** @private */\n    _getJson(url) {\n        return getJson(url)\n    }\n}","import { getJson } from '../util/index.js'\nimport { CONFIG } from '../config/index.js'\n\n/**\n* @private\n*/\nexport class ListsWS {\n\n    async getSpeciesList(speciesListId) {\n        let url = `${CONFIG.URL_LISTS_WS}/ws/speciesListItems/${speciesListId}`;\n        let json = await getJson(url);\n        return this._buildSpeciesListDTO(json);\n    }\n\n\n    /**\n    * @private\n    */\n    _buildSpeciesListDTO(json) {\n        return json;\n    }\n\n}","import { RecordsWS } from '../services/records-ws.js'\nimport { ListsWS } from '../services/lists-ws.js'\nimport {rejectInvalidRequest, ERROR_MESSAGES} from '../validation/index.js'\nimport {SPECIES_LIST} from '../config/index.js'\n\n/**\n * @classdesc Represents the NBN Places SDK. In Beta!!\n * @memberof NBNAtlas\n */\n export class Places {\n\n    /**\n     * Create a place.\n     * @param {number} layerId - The NBN layer id.\n    */\n    constructor(layerId) {\n        this.layerId = layerId;\n        this.recordsWS = new RecordsWS();\n        this.listsWS = new ListsWS();\n    }\n\n    /**\n     * Returns the species count grouped by species group.\n     * @async\n     * @example\n     * NBNAtlas.places(NBNAtlas.LAYERS.BEAUTIFUL_BURIAL_GROUNDS).getSpeciesCountByGroup('Croydon Cemetery', NBNAtlas.SPECIES_LIST.BEAUTIFUL_BURIAL_GROUNDS_SEEK_ADVICE)\n     *\n     * @param {string} placeName - The unique name of the place\n     * @param {string} [selectedspeciesListId] - The id of a species list for which a grouped count is also returned.\n     * @return {Promise<Array<NBNAtlas.typedefs.SpeciesCountByGroup>>}\n     */\n    async getSpeciesCountByGroup(placeName, selectedspeciesListId) {\n        if (!placeName) {\n            return rejectInvalidRequest(ERROR_MESSAGES.MISSING_PLACE_NAME);\n        }\n       \n        const speciesCountByGroupDTO = await this.recordsWS.getSpeciesCountByGroup({layerId:this.layerId, placeName});\n\n        let selectedSpeciesCountByGroupDTO = selectedspeciesListId ? \n            await this.recordsWS.getSpeciesCountByGroupForSpeciesList({layerId:this.layerId, placeName, speciesListId:selectedspeciesListId}) : [];\n      \n        return this._buildSpeciesCountByGroupResult(speciesCountByGroupDTO, selectedSpeciesCountByGroupDTO);\n    }\n\n    /**\n     * Returns the occurrence counts.\n     * @example\n     * NBNAtlas.places(NBNAtlas.LAYERS.BEAUTIFUL_BURIAL_GROUNDS).getOccurrenceCount('Argyll Biological Records Centre')\n     *\n     * @param {string} placeName - The unique name of the place.\n     * @return {Promise<Array<NBNAtlas.typedefs.OccurrenceCount>>}\n     */\n    async getOccurrenceCount(placeName) {\n        if (!placeName) {\n            return rejectInvalidRequest(ERROR_MESSAGES.MISSING_PLACE_NAME);\n        }\n        \n        let result = [];\n        const occurrenceCountDTO = await this.recordsWS.getOccurrenceCount({layerId:this.layerId, placeName});\n        if (occurrenceCountDTO) {\n            const sensitiveInWalesDTO = await this.listsWS.getSpeciesList(SPECIES_LIST.SENSITIVE_IN_WALES);\n            const sensitiveInEnglandDTO = await this.listsWS.getSpeciesList(SPECIES_LIST.SENSITIVE_IN_ENGLAND);\n\n            result = this._buildOccurrenceCountResult(occurrenceCountDTO, sensitiveInWalesDTO, sensitiveInEnglandDTO);\n        }\n\n        return result;\n    }\n\n\n    /**\n    * Returns the occurrence counts for a species list.\n    * @async\n    * @example\n    * NBNAtlas.places(NBNAtlas.LAYERS.BEAUTIFUL_BURIAL_GROUNDS).getOccurrenceCount('Argyll Biological Records Centre')\n    *\n    * @param {string} placeName - The unique name of the place.\n    * @param {string} speciesListId - The species list id.\n    * @return {Promise<Array<NBNAtlas.typedefs.OccurrenceCount>>}\n    */\n    async getOccurrenceCountForSpeciesList(placeName, speciesListId) {\n        if (!placeName) {\n            return rejectInvalidRequest(ERROR_MESSAGES.MISSING_PLACE_NAME);\n        }\n        if (!speciesListId) {\n            return rejectInvalidRequest(ERROR_MESSAGES.MISSING_SPECIES_LIST_ID);\n        }\n        const speciesListDTO = await this.listsWS.getSpeciesList(speciesListId);\n\n        let result = [];\n        const occurrenceCountDTO = await this.recordsWS.getOccurrenceCountForSpeciesList({layerId:this.layerId, placeName, speciesListId});\n     alert(JSON.stringify(occurrenceCountDTO))\n        if (occurrenceCountDTO) {\n            const sensitiveInWalesDTO = await this.listsWS.getSpeciesList(SPECIES_LIST.SENSITIVE_IN_WALES);\n            const sensitiveInEnglandDTO = await this.listsWS.getSpeciesList(SPECIES_LIST.SENSITIVE_IN_ENGLAND);\n\n            result = this._buildOccurrenceCountForSpeciesListResult(speciesListDTO, occurrenceCountDTO, sensitiveInWalesDTO, sensitiveInEnglandDTO);\n        }\n\n        return result;\n    }\n\n\n\n    /**\n     * @private\n     */\n    _buildSpeciesCountByGroupResult(speciesCountByGroupDTO, selectedSpeciesCountByGroupDTO) {\n        const map = new Map();\n\n        speciesCountByGroupDTO.forEach(it => map.set(it.name,\n            {\n                speciesGroup: it.name,\n                speciesCount: it.speciesCount,\n                selectedSpeciesCount: 0\n            }\n        ));\n\n        selectedSpeciesCountByGroupDTO.forEach(it => {\n            let val = map.get(it.name);\n\n            if (!val) {\n                map.set(it.name, {\n                    speciesGroup: it.name,\n                    speciesCount: 0,\n                    selectedSpeciesCount: it.speciesCount\n                });\n            } else {\n                val = {\n                    ...val,\n                    selectedSpeciesCount: it.speciesCount\n                };\n            }\n\n        });\n\n        return [...map.values()];\n\n    }\n\n\n    /**\n     * @private\n     */\n    _buildOccurrenceCountResult(occurrenceCountDTO, sensitiveInEnglandDTO, sensitiveInWalesDTO) {\n        if (!occurrenceCountDTO) {\n            return {}\n        }\n        const england = this._sensitiveSpeciesJSONToMap(sensitiveInEnglandDTO);\n        const wales = this._sensitiveSpeciesJSONToMap(sensitiveInWalesDTO);\n        return occurrenceCountDTO.map(it => (\n            {\n                scientificName: it.additional.scientificName,\n                commonName: it.additional.commonName,\n                taxonGuid: it.additional.taxonGuid,\n                count: it.count,\n                sensitiveInEngland: england[it.additional.taxonGuid] ? true : false,\n                sensitiveInWales: wales[it.additional.taxonGuid] ? true : false\n            }\n        ));\n    }\n\n    /**\n     * @private\n     */\n    _buildOccurrenceCountForSpeciesListResult(speciesListDTO, occurrenceCountDTO, sensitiveInEnglandDTO, sensitiveInWalesDTO) {\n        if (!occurrenceCountDTO) {\n            return {}\n        }\n        const england = this._sensitiveSpeciesJSONToMap(sensitiveInEnglandDTO);\n        const wales = this._sensitiveSpeciesJSONToMap(sensitiveInWalesDTO);\n        return speciesListDTO.map(it => (\n            {\n                scientificName: it.scientificName,\n                commonName: it.commonName,\n                taxonGuid: it.lsid,\n                count: this._getOccurrenceCount(it.lsid, occurrenceCountDTO),\n                sensitiveInEngland: england[it.lsid] ? true : false,\n                sensitiveInWales: wales[it.lsid] ? true : false\n            }\n        ));\n    }\n\n    /**\n    * @private \n    */\n    _getOccurrenceCount(taxonGuid, occurrenceCountDTO) {\n        let count = 0;\n        occurrenceCountDTO.some(it => {\n            if (it.additional.taxonGuid === taxonGuid) {\n                count = it.count;\n                return true;\n            }\n            return false;\n        });\n        return count;\n    }\n\n    /**\n     * @private\n     */\n    _sensitiveSpeciesJSONToMap(json) {\n        return json.reduce((map, obj) => {\n            map[obj.lsid] = obj;\n            return map;\n        }, {});\n    }\n\n   \n\n}\n\nexport var places = function (layerId) {\n\treturn new Places(layerId);\n};\n","import { SpeciesWS } from '../services/species-ws.js'\nimport { rejectInvalidRequest, ERROR_MESSAGES } from '../validation/index.js'\nimport { SPECIES_LIST, LAYERS } from '../config/index.js'\nimport { Places } from './places.js'\n\n/**\n * @classdesc Represents the Beautiful Burial Grounds SDK.\n * @memberof NBNAtlas\n */\nexport class BBG {\n\n    constructor() {\n        this.places = new Places(LAYERS.BEAUTIFUL_BURIAL_GROUNDS)\n        this.speciesWS = new SpeciesWS();\n    }\n\n    /**\n     * @description Returns the seek advice data.\n     * @async\n     * @example\n     * NBNAtlas.bbg.getSeekAdviceData('Croydon Cemetery')\n     * \n     * @param {string} placeName - The unique name of the place\n     * @return {Promise<Array<NBNAtlas.OccurrenceCount>>}\n     *   \n     */\n    async getSeekAdviceData(placeName) {\n        return this.places.getOccurrenceCountForSpeciesList(placeName, SPECIES_LIST.BEAUTIFUL_BURIAL_GROUNDS_SEEK_ADVICE)\n    }\n\n    /**\n     * @description Returns the seek advice data.\n     * @async\n     * @example\n     * NBNAtlas.bbg.getSeekAdviceDataForAssetID('615214')\n     *\n     * @param {string} assetID\n     * @return {Promise<Array<NBNAtlas.OccurrenceCount>>}\n     *\n     */\n    async getSeekAdviceDataForAssetID(assetID) {\n        if (!assetID) {\n            return rejectInvalidRequest(ERROR_MESSAGES.MISSING_ASSET_ID);\n        }\n        let asset = await this.speciesWS.getBBGPlacesForAssetID(assetID);console.log(asset);\n        let counts = await this.places.getOccurrenceCountForSpeciesList(asset.places, SPECIES_LIST.BEAUTIFUL_BURIAL_GROUNDS_SEEK_ADVICE);\n        return {\n            assetID:(await asset).assetID,\n            assetName:(await asset).assetName,\n            counts:counts\n        }\n    }\n\n    /**\n     * @description Returns the digest table data.\n     * @async\n     * @example\n     * NBNAtlas.bbg.getDigestTableData('Croydon Cemetery')\n     *\n     * @param {string} placeName - The unique name of the place\n     * @return {Promise<Array<NBNAtlas.SpeciesCountByGroup>>}\n    */\n    async getDigestTableData(placeName) {\n        return this.places.getSpeciesCountByGroup(placeName, SPECIES_LIST.BEAUTIFUL_BURIAL_GROUNDS_DIGEST_TABLE)\n    }\n\n    /**\n     * @description Returns the digest table data.\n     * @async\n     * @example\n     * NBNAtlas.bbg.getDigestTableDataForAssetID('615214')\n     *\n     * @param {string} assetID\n     * @return {Promise<Array<NBNAtlas.SpeciesCountByGroup>>}\n     */\n    async getDigestTableDataForAssetID(assetID) {\n        if (!assetID) {\n            return rejectInvalidRequest(ERROR_MESSAGES.MISSING_ASSET_ID);\n        }\n        let asset = await this.speciesWS.getBBGPlacesForAssetID(assetID);\n        let counts = await this.places.getSpeciesCountByGroup(asset.places, SPECIES_LIST.BEAUTIFUL_BURIAL_GROUNDS_DIGEST_TABLE)\n        return {\n            assetID:(await asset).assetID,\n            assetName:(await asset).assetName,\n            counts:counts\n        }\n\n    }\n\n    /**\n     * @description Returns a BBG site or place.\n     * @async\n     * @example\n     * NBNAtlas.bbg.getPlace('Baildon: St James')\n     *\n     * @param {string} placeName - The unique name of the place\n     * @return {Promise<NBNAtlas.BBGPlace>}\n    */\n    async getPlace(placeName) {\n        if (!placeName) {\n            return rejectInvalidRequest(ERROR_MESSAGES.MISSING_PLACE_NAME);\n        }\n        return await this.speciesWS.getBBGPlace(placeName);\n    }\n\n\n}\n\n\nexport const bbg = new BBG();"],"names":["async","getJson","url","controller","AbortController","setTimeout","abort","response","fetch","signal","status","Promise","reject","message","statusText","body","data","json","encodeAndJoin","items","separator","map","it","encodeURIComponent","join","CONFIG","URL_RECORDS_WS","URL_SPECIES_WS","URL_LISTS_WS","LAYERS","BEAUTIFUL_BURIAL_GROUNDS","SPECIES_LIST","BEAUTIFUL_BURIAL_GROUNDS_SEEK_ADVICE","BEAUTIFUL_BURIAL_GROUNDS_DIGEST_TABLE","SENSITIVE_IN_ENGLAND","SENSITIVE_IN_WALES","SpeciesWS","placeName","this","_buildGetPlaceUrl","_getJson","_buildBBGPlaceDTO","assetID","_buildBBGAssetDTO","result","searchResults","results","id_s","name","bbg_name_s","length","assetName","name_s","places","ERROR_MESSAGES","rejectInvalidRequest","RecordsWS","layerId","_buildSpeciesCountByGroupDTO","speciesListId","_buildOccurrenceCountDTO","facetResults","fieldResult","label","split","additional","scientificName","commonName","taxonGuid","ListsWS","_buildSpeciesListDTO","Places","constructor","recordsWS","listsWS","selectedspeciesListId","speciesCountByGroupDTO","getSpeciesCountByGroup","selectedSpeciesCountByGroupDTO","getSpeciesCountByGroupForSpeciesList","_buildSpeciesCountByGroupResult","occurrenceCountDTO","getOccurrenceCount","sensitiveInWalesDTO","getSpeciesList","sensitiveInEnglandDTO","_buildOccurrenceCountResult","speciesListDTO","getOccurrenceCountForSpeciesList","alert","JSON","stringify","_buildOccurrenceCountForSpeciesListResult","Map","forEach","set","speciesGroup","speciesCount","selectedSpeciesCount","val","get","values","england","_sensitiveSpeciesJSONToMap","wales","count","sensitiveInEngland","sensitiveInWales","lsid","_getOccurrenceCount","some","reduce","obj","BBG","speciesWS","asset","getBBGPlacesForAssetID","console","log","counts","getBBGPlace","bbg"],"mappings":";;;;sMAGQA,eAAeC,EAAQC,GAC3B,MAAMC,EAAa,IAAIC,gBACvBC,YAAW,IAAMF,EAAWG,SAAS,KAErC,MAAMC,QAAiBC,MAAMN,EAAK,CAAEO,OAAQN,EAAWM,SAEvD,GAAIF,EAASG,QAAU,IACnB,OAAOC,QAAQC,OAAO,CAClBF,OAAQH,EAASG,OACjBG,QAASN,EAASO,WAClBC,KAAMR,EAASS,OAGvB,GAAIT,EAASG,QAAU,KAAOH,EAASG,QAAU,IAAK,CAElD,aADmBH,EAASU,OAGhC,MAAO,GAGJ,SAASC,EAAcC,EAAOC,EAAY,QAE7C,OADkBD,EAAME,KAAIC,GAAMC,mBAAmB,IAAMD,EAAK,OAC5CE,KAAK,YCrBhBC,EAAS,CAClBC,eAAgB,kCAChBC,eAAgB,kCAChBC,aAAc,8BCFLC,EAAS,CAClBC,yBAA2B,SCElBC,EAAe,CACxBC,qCAAsC,SACtCC,sCAAuC,SACvCC,qBAAsB,SACtBC,mBAAoB,UCNjB,MAAMC,EAETpC,kBAAkBqC,GACd,IAAInC,EAAMoC,KAAKC,kBAAkBF,GAC7BpB,QAAaqB,KAAKE,SAAStC,GAC/B,OAAOoC,KAAKG,kBAAkBxB,GAIlCjB,6BAA6B0C,GACzB,IAAIxC,EAAM,GAAGuB,EAAOE,2DAA2De,IAC3EzB,QAAaqB,KAAKE,SAAStC,GAC/B,OAAOoC,KAAKK,kBAAkB1B,GAQlCwB,kBAAkBxB,GAEd,IAAI2B,EAAS3B,EAAK4B,eAAiB5B,EAAK4B,cAAcC,SAAW7B,EAAK4B,cAAcC,QAAQ,GACxF7B,EAAK4B,cAAcC,QAAQ,GAAK,KACpC,OAAOF,EAAS,CACZF,QAASE,EAAOG,KAChBC,KAAMJ,EAAOK,YAEX,GAGVN,kBAAkB1B,GAEd,IAAI2B,EAAS3B,EAAK4B,eAAiB5B,EAAK4B,cAAcC,SAAW7B,EAAK4B,cAAcC,QAAQI,OAAO,EAC/FjC,EAAK4B,cAAcC,QAAU,KACjC,OAAOF,EAAS,CACRF,QAAQE,EAAO,GAAGG,KAClBI,UAAUP,EAAO,GAAGQ,OACpBC,OAAOT,EAAOvB,KAAIC,GAAIA,EAAG2B,cAE3B,GAMVV,kBAAkBF,GACd,MAAO,GAAGZ,EAAOE,2DAA2DJ,mBAAmB,IAAMc,EAAY,OAKrHG,SAAStC,GACL,OAAOD,EAAQC,ICvDf,MAAMoD,EACU,qBADVA,EAEe,0BAFfA,EAGQ,mBCHf,SAASC,EAAqB1C,GACjC,OAAOF,QAAQC,OAAO,CAClBF,OAAQ,UACRG,QAASA,ICDV,MAAM2C,EAGTxD,8BAA6ByD,QAACA,EAAOpB,UAAEA,IACV,iBAAdA,IACPA,EAAY,CAACA,IAEjB,IAAInC,EAAM,GAAGuB,EAAOC,0CAA0C+B,MAAYvC,EAAcmB,mCACpFpB,QAAaqB,KAAKE,SAAStC,GAC/B,OAAOoC,KAAKoB,6BAA6BzC,GAG7CjB,4CAA2CyD,QAACA,EAAOpB,UAAEA,EAASsB,cAAEA,IACnC,iBAAdtB,IACPA,EAAY,CAACA,IAEjB,IAAInC,EAAM,GAAGuB,EAAOC,0CAA0C+B,MAAYvC,EAAcmB,mCACxFnC,EAAM,GAAGA,yBAA2ByD,IACpC,IAAI1C,QAAaqB,KAAKE,SAAStC,GAC/B,OAAOoC,KAAKoB,6BAA6BzC,GAG7CjB,0BAAyByD,QAACA,EAAOpB,UAAEA,IACN,iBAAdA,IACPA,EAAY,CAACA,IAEjB,MAAMnC,EAAM,GAAGuB,EAAOC,uCAAuC+B,MAAYvC,EAAcmB,2IAEjFpB,QAAaqB,KAAKE,SAAStC,GACjC,OAAOoC,KAAKsB,yBAAyB3C,GAGzCjB,wCAAuCyD,QAACA,EAAOpB,UAAEA,EAASsB,cAAEA,IAC/B,iBAAdtB,IACPA,EAAY,CAACA,IAEjB,MAAMnC,EAAM,GAAGuB,EAAOC,uCAAuC+B,MAAYvC,EAAcmB,iIACfsB,+BAElE1C,QAAaqB,KAAKE,SAAStC,GACjC,OAAOoC,KAAKsB,yBAAyB3C,GAMzCyC,6BAA6BzC,GACzB,OAAOA,EAMX2C,yBAAyB3C,GAgBrB,OAbaA,EAAK4C,cAAgB5C,EAAK4C,aAAa,IAAM5C,EAAK4C,aAAa,GAAGC,YAC3E7C,EAAK4C,aAAa,GAAGC,YAAYzC,KAAIC,IACjC,MAAMyC,EAAQzC,EAAGyC,MAAMC,MAAM,KAC7B,MAAO,IACA1C,EACH2C,WAAY,CACRC,eAAgBH,EAAM,GACtBI,WAAYJ,EAAM,GAClBK,UAAWL,EAAM,QAGxB,GAMbvB,SAAStC,GACL,OAAOD,EAAQC,IC1EhB,MAAMmE,EAETrE,qBAAqB2D,GACjB,IAAIzD,EAAM,GAAGuB,EAAOG,oCAAoC+B,IACpD1C,QAAahB,EAAQC,GACzB,OAAOoC,KAAKgC,qBAAqBrD,GAOrCqD,qBAAqBrD,GACjB,OAAOA,GCVP,MAAMsD,EAMVC,YAAYf,GACRnB,KAAKmB,QAAUA,EACfnB,KAAKmC,UAAY,IAAIjB,EACrBlB,KAAKoC,QAAU,IAAIL,EAavBrE,6BAA6BqC,EAAWsC,GACpC,IAAKtC,EACD,OAAOkB,EAAqBD,GAGhC,MAAMsB,QAA+BtC,KAAKmC,UAAUI,uBAAuB,CAACpB,QAAQnB,KAAKmB,QAASpB,UAAAA,IAElG,IAAIyC,EAAiCH,QAC3BrC,KAAKmC,UAAUM,qCAAqC,CAACtB,QAAQnB,KAAKmB,QAASpB,UAAAA,EAAWsB,cAAcgB,IAA0B,GAExI,OAAOrC,KAAK0C,gCAAgCJ,EAAwBE,GAWxE9E,yBAAyBqC,GACrB,IAAKA,EACD,OAAOkB,EAAqBD,GAGhC,IAAIV,EAAS,GACb,MAAMqC,QAA2B3C,KAAKmC,UAAUS,mBAAmB,CAACzB,QAAQnB,KAAKmB,QAASpB,UAAAA,IAC1F,GAAI4C,EAAoB,CACpB,MAAME,QAA4B7C,KAAKoC,QAAQU,eAAerD,EAAaI,oBACrEkD,QAA8B/C,KAAKoC,QAAQU,eAAerD,EAAaG,sBAE7EU,EAASN,KAAKgD,4BAA4BL,EAAoBE,EAAqBE,GAGvF,OAAOzC,EAcX5C,uCAAuCqC,EAAWsB,GAC9C,IAAKtB,EACD,OAAOkB,EAAqBD,GAEhC,IAAKK,EACD,OAAOJ,EAAqBD,GAEhC,MAAMiC,QAAuBjD,KAAKoC,QAAQU,eAAezB,GAEzD,IAAIf,EAAS,GACb,MAAMqC,QAA2B3C,KAAKmC,UAAUe,iCAAiC,CAAC/B,QAAQnB,KAAKmB,QAASpB,UAAAA,EAAWsB,cAAAA,IAEnH,GADH8B,MAAMC,KAAKC,UAAUV,IACdA,EAAoB,CACpB,MAAME,QAA4B7C,KAAKoC,QAAQU,eAAerD,EAAaI,oBACrEkD,QAA8B/C,KAAKoC,QAAQU,eAAerD,EAAaG,sBAE7EU,EAASN,KAAKsD,0CAA0CL,EAAgBN,EAAoBE,EAAqBE,GAGrH,OAAOzC,EAQXoC,gCAAgCJ,EAAwBE,GACpD,MAAMzD,EAAM,IAAIwE,IA4BhB,OA1BAjB,EAAuBkB,SAAQxE,GAAMD,EAAI0E,IAAIzE,EAAG0B,KAC5C,CACIgD,aAAc1E,EAAG0B,KACjBiD,aAAc3E,EAAG2E,aACjBC,qBAAsB,MAI9BpB,EAA+BgB,SAAQxE,IACnC,IAAI6E,EAAM9E,EAAI+E,IAAI9E,EAAG0B,MAEhBmD,EAODA,EAAM,IACCA,EACHD,qBAAsB5E,EAAG2E,cAR7B5E,EAAI0E,IAAIzE,EAAG0B,KAAM,CACbgD,aAAc1E,EAAG0B,KACjBiD,aAAc,EACdC,qBAAsB5E,EAAG2E,kBAW9B,IAAI5E,EAAIgF,UAQnBf,4BAA4BL,EAAoBI,EAAuBF,GACnE,IAAKF,EACD,MAAO,GAEX,MAAMqB,EAAUhE,KAAKiE,2BAA2BlB,GAC1CmB,EAAQlE,KAAKiE,2BAA2BpB,GAC9C,OAAOF,EAAmB5D,KAAIC,KAEtB4C,eAAgB5C,EAAG2C,WAAWC,eAC9BC,WAAY7C,EAAG2C,WAAWE,WAC1BC,UAAW9C,EAAG2C,WAAWG,UACzBqC,MAAOnF,EAAGmF,MACVC,qBAAoBJ,EAAQhF,EAAG2C,WAAWG,WAC1CuC,mBAAkBH,EAAMlF,EAAG2C,WAAWG,eAQlDwB,0CAA0CL,EAAgBN,EAAoBI,EAAuBF,GACjG,IAAKF,EACD,MAAO,GAEX,MAAMqB,EAAUhE,KAAKiE,2BAA2BlB,GAC1CmB,EAAQlE,KAAKiE,2BAA2BpB,GAC9C,OAAOI,EAAelE,KAAIC,KAElB4C,eAAgB5C,EAAG4C,eACnBC,WAAY7C,EAAG6C,WACfC,UAAW9C,EAAGsF,KACdH,MAAOnE,KAAKuE,oBAAoBvF,EAAGsF,KAAM3B,GACzCyB,qBAAoBJ,EAAQhF,EAAGsF,MAC/BD,mBAAkBH,EAAMlF,EAAGsF,UAQvCC,oBAAoBzC,EAAWa,GAC3B,IAAIwB,EAAQ,EAQZ,OAPAxB,EAAmB6B,MAAKxF,GAChBA,EAAG2C,WAAWG,YAAcA,IAC5BqC,EAAQnF,EAAGmF,OACJ,KAIRA,EAMXF,2BAA2BtF,GACvB,OAAOA,EAAK8F,QAAO,CAAC1F,EAAK2F,KACrB3F,EAAI2F,EAAIJ,MAAQI,EACT3F,IACR,KCpMJ,MAAM4F,EAETzC,cACIlC,KAAKe,OAAS,IAAIkB,EAAO1C,EAAOC,0BAChCQ,KAAK4E,UAAY,IAAI9E,EAazBpC,wBAAwBqC,GACpB,OAAOC,KAAKe,OAAOmC,iCAAiCnD,EAAWN,EAAaC,sCAahFhC,kCAAkC0C,GAC9B,IAAKA,EACD,OAAOa,EAAqBD,GAEhC,IAAI6D,QAAc7E,KAAK4E,UAAUE,uBAAuB1E,GAAS2E,QAAQC,IAAIH,GAC7E,IAAII,QAAejF,KAAKe,OAAOmC,iCAAiC2B,EAAM9D,OAAQtB,EAAaC,sCAC3F,MAAO,CACHU,eAAeyE,GAAOzE,QACtBS,iBAAiBgE,GAAOhE,UACxBoE,OAAOA,GAafvH,yBAAyBqC,GACrB,OAAOC,KAAKe,OAAOwB,uBAAuBxC,EAAWN,EAAaE,uCAYtEjC,mCAAmC0C,GAC/B,IAAKA,EACD,OAAOa,EAAqBD,GAEhC,IAAI6D,QAAc7E,KAAK4E,UAAUE,uBAAuB1E,GACpD6E,QAAejF,KAAKe,OAAOwB,uBAAuBsC,EAAM9D,OAAQtB,EAAaE,uCACjF,MAAO,CACHS,eAAeyE,GAAOzE,QACtBS,iBAAiBgE,GAAOhE,UACxBoE,OAAOA,GAcfvH,eAAeqC,GACX,OAAKA,QAGQC,KAAK4E,UAAUM,YAAYnF,GAF7BkB,EAAqBD,UAS3BmE,EAAM,IAAIR,6EDuGH,SAAUxD,GAC7B,OAAO,IAAIc,EAAOd"}