{"version":3,"file":"nbnatlas-sdk.js","sources":["../src/util/index.js","../src/config/config.js","../src/config/layers.js","../src/config/species-list.js","../src/services/species-ws.js","../src/validation/error-messages.js","../src/validation/index.js","../src/services/records-ws.js","../src/services/lists-ws.js","../src/core/places.js","../src/core/bbg.js"],"sourcesContent":["/** \n     * @private\n     */\n export async function getJson(url) {\n    const controller = new AbortController();\n    setTimeout(() => controller.abort(), 10000);\n\n    const response = await fetch(url, { signal: controller.signal });\n\n    if (response.status >= 400) {\n        return Promise.reject({\n            status: response.status,\n            message: response.statusText,\n            body: response.data\n        });\n    }\n    if (response.status >= 200 && response.status <= 202) {\n        const json = await response.json();\n        return json;\n    }\n    return {};\n}\n\nexport function encodeAndJoin(items, separator = \" OR \"){\n    let encodedItems= items.map(it => encodeURIComponent('\"' + it + '\"'));\n    return encodedItems.join(\"OR\");\n}","\n/**\n * @private\n */\nexport const CONFIG = {\n    URL_RECORDS_WS: 'https://records-ws.nbnatlas.org',\n    URL_SPECIES_WS: 'https://species-ws.nbnatlas.org',\n    URL_LISTS_WS: 'https://lists.nbnatlas.org'\n}\n","/** \n * Layer ID's\n * @memberof NBNAtlas\n * @property {string} BEAUTIFUL_BURIAL_GROUNDS\n*/\nexport const LAYERS = {\n    BEAUTIFUL_BURIAL_GROUNDS : \"cl273\",\n}\n\n\n/**\n * @typedef {Object}\n * @memberof NBNAtlas\n * @name SpeciesCountByGroup\n * @property {string} speciesGroup - The species group\n * @property {number} speciesCount - The number of species counted\n * @property {number} selectedSpeciesCount - The number of species counted that are of selected interest \n */\n\n/**\n * @typedef {Object}\n * @memberof NBNAtlas\n * @name OccurrenceCount\n * @property {string} scientificName\n * @property {string} commonName\n * @property {string} taxonGuid\n * @property {number} lastRecorded - year of most recent occurrence record, 0 if not known\n * @property {number} count\n * @property {boolean} sensitiveInEngland - true if species is sensitive in England\n * @property {boolean} sensitiveInWales - true if species is sensitive in Wales\n */\n\n/**\n * @typedef {Object}\n * @memberof NBNAtlas\n * @name Place\n * @property {string} id\n * @property {number} name\n */\n\n/**\n * @typedef {Object}\n * @memberof NBNAtlas\n * @name BBGPlace\n * @property {string} assetID\n * @property {number} name\n */","/** \n * Species List ID's\n * @memberof NBNAtlas\n * @property {string} BEAUTIFUL_BURIAL_GROUNDS_SEEK_ADVICE\n * @property {string} BEAUTIFUL_BURIAL_GROUNDS_DIGEST_TABLE\n * @property {string} SENSITIVE_IN_ENGLAND\n * @property {string} SENSITIVE_IN_WALES\n*/\nexport const SPECIES_LIST = {\n    BEAUTIFUL_BURIAL_GROUNDS_SEEK_ADVICE: \"dr2504\",\n    BEAUTIFUL_BURIAL_GROUNDS_DIGEST_TABLE: \"dr2492\",\n    SENSITIVE_IN_ENGLAND: \"dr2058\",\n    SENSITIVE_IN_WALES: \"dr2067\"\n}","import { getJson } from '../util/index.js'\nimport { CONFIG } from '../config/index.js'\n\n/**\n* @private\n*/\nexport class SpeciesWS {\n\n    async getBBGPlace(placeName) {\n        let url = this._buildGetPlaceUrl(placeName);\n        let json = await this._getJson(url);\n        return this._buildBBGPlaceDTO(json);\n    }\n\n\n    async getBBGPlacesForAssetID(assetID) {\n        let url = `${CONFIG.URL_SPECIES_WS}/search?fq=idxtype:REGIONFEATURED&fq=assetid_s:${assetID}`;;\n        let json = await this._getJson(url);\n        return this._buildBBGAssetDTO(json);\n    }\n\n\n\n    /**\n      * @private\n      */\n    _buildBBGPlaceDTO(json) {\n        //let result = json.searchResults?.results?.[0];\n        let result = json.searchResults && json.searchResults.results && json.searchResults.results[0] ?\n            json.searchResults.results[0] : null;\n        return result ? {\n            assetID: result.assetid_s,\n            name: result.bbg_name_s\n        }\n            : [];\n    }\n\n    _buildBBGAssetDTO(json) {\n        //let result = json.searchResults?.results?.[0];\n        let result = json.searchResults && json.searchResults.results && json.searchResults.results.length>0 ?\n            json.searchResults.results : null;\n        return result ? {\n                assetID:result[0].assetid_s,\n                assetName:result[0].name_s,\n                places:result.map(it=>it.bbg_name_s)\n            }\n            : {};\n    }\n\n    /**\n      * @private\n      */\n    _buildGetPlaceUrl(placeName) {\n        return `${CONFIG.URL_SPECIES_WS}/search?fq=idxtype:REGIONFEATURED&fq=name:${encodeURIComponent('\"' + placeName + '\"')}`;\n    }\n\n\n    /** @private */\n    _getJson(url) {\n        return getJson(url)\n    }\n\n}\n\n","\n/**\n * @private\n */\n export const ERROR_MESSAGES = {\n    MISSING_PLACE_NAME: \"Missing place name\",\n    MISSING_SPECIES_LIST_ID: \"Missing species list id\",\n    MISSING_ASSET_ID: \"Missing asset id\",\n}\n","\n/**\n    * @private\n*/\nexport function rejectInvalidRequest(message) {\n    return Promise.reject({\n        status: \"INVALID\",\n        message: message\n    });\n}\n\nexport * from  './error-messages.js'","import { getJson, encodeAndJoin } from '../util/index.js'\nimport { CONFIG } from '../config/index.js'\n\n/**\n* @private\n*/\nexport class RecordsWS {\n\n\n    async getSpeciesCountByGroup({layerId, placeNames}) {\n        let url = `${CONFIG.URL_RECORDS_WS}/explore/groups?q=*:*&fq=${layerId}:(${encodeAndJoin(placeNames)})&fq=-occurrence_status:absent`;\n        let json = await this._getJson(url);\n        return this._buildSpeciesCountByGroupDTO(json);\n    }\n\n    async getSpeciesCountByGroupForSpeciesList({layerId, placeNames, speciesListId}) {\n        let url = `${CONFIG.URL_RECORDS_WS}/explore/groups?q=*:*&fq=${layerId}:(${encodeAndJoin(placeNames)})&fq=-occurrence_status:absent`;\n        url = `${url}&fq=species_list_uid:${speciesListId}`;\n        let json = await this._getJson(url);\n        return this._buildSpeciesCountByGroupDTO(json);\n    }\n\n    async getOccurrenceCount({layerId, placeNames}) {\n        const url = `${CONFIG.URL_RECORDS_WS}/occurrences/search?q=${layerId}:(${encodeAndJoin(placeNames)})&facets=names_and_lsid&pageSize=1&flimit=-1\n                                &fq=-occurrence_status:absent&sort=year&dir=desc&fl=year`;\n        const json = await this._getJson(url);\n        const occurrenceCountDTO = this._buildOccurrenceCountDTO(json);\n        if (occurrenceCountDTO.length) {\n            await this._addLastOccurrenceYear({layerId, placeNames, speciesListId: undefined, occurrenceCountDTO})\n            const batCount = await this._getBatOccurrenceCount({layerId, placeNames})\n            occurrenceCountDTO.push(batCount);\n        }\n\n        return occurrenceCountDTO;\n    }\n\n    async getOccurrenceCountForSpeciesList({layerId, placeNames, speciesListId}) {\n        const url = `${CONFIG.URL_RECORDS_WS}/occurrences/search?q=${layerId}:(${encodeAndJoin(placeNames)})&facets=names_and_lsid&pageSize=1&flimit=-1\n                            &fq=-occurrence_status:absent&fq=species_list_uid:${speciesListId}&sort=year&dir=desc&fl=year`;\n\n        const json = await this._getJson(url);\n        const occurrenceCountDTO = this._buildOccurrenceCountDTO(json)\n        if (occurrenceCountDTO.length) {\n            await this._addLastOccurrenceYear({layerId, placeNames, speciesListId, occurrenceCountDTO})\n            const batCount = await this._getBatOccurrenceCount({layerId, placeNames})\n            occurrenceCountDTO.push(batCount);\n        }\n\n        return occurrenceCountDTO;\n    }\n\n    async _getBatOccurrenceCount({layerId, placeNames}) {\n        const url =`${CONFIG.URL_RECORDS_WS}/occurrences/search?q=${layerId}:(${encodeAndJoin(placeNames)})&fq=lsid:NHMSYS0000376160\n                            &fq=occurrence_status:present&pageSize=1&sort=year&dir=desc`;\n        const json = await this._getJson(url);\n\n        const occurrenceCountDTO = json.occurrences.length ?  {\n            count:json.totalRecords,\n            year:json.occurrences[0].year,\n            additional: {\n                scientificName: \"Chiroptera\",\n                commonName: \"Bat\",\n                taxonGuid: \"NHMSYS0020001355\"\n            }} : {\n            count:0,\n            year:0,\n            additional: {\n                scientificName: \"Chiroptera\",\n                commonName: \"Bat\",\n                taxonGuid: \"NHMSYS0020001355\"\n            }};\n        return occurrenceCountDTO;\n    }\n\n    /**\n    * @private\n    */\n    _buildSpeciesCountByGroupDTO(json) {\n        return json;\n    }\n\n    /**\n     * @private\n     */\n    _buildOccurrenceCountDTO(json) {\n        //let result = json.facetResults?.[0]?.fieldResult?.map(it => {\n        // let year = json.occurrences && json.occurrences[0] && json.occurrences[0].year ? json.occurrences[0].year:0;\n        const result = json.facetResults && json.facetResults[0] && json.facetResults[0].fieldResult ?\n            json.facetResults[0].fieldResult.map(it => {\n                const label = it.label.split('|');\n                return {\n                    ...it,\n                    year:0, //this will be calculated later\n                    additional: {\n                        scientificName: label[0],\n                        commonName: label[2],\n                        taxonGuid: label[1]\n                    }\n                };\n            }) : [];\n\n        return result;\n    }\n\n\n    /**\n     * @private\n     */\n    async _addLastOccurrenceYear({layerId, placeNames, speciesListId, occurrenceCountDTO}) {\n       // const totalCount = occurrenceCountDTO.reduce((acc, cur) => acc + cur.count, 0);\n            const taxnConceptGuids = \"(\"+occurrenceCountDTO.map(item => item.additional.taxonGuid).join(' OR ')+\")\";\n\n            const url = `${CONFIG.URL_RECORDS_WS}/occurrences/search?q=${layerId}:(${encodeAndJoin(placeNames)})&pageSize=20000\n                                &fq=-occurrence_status:absent&fq=taxon_concept_lsid:${taxnConceptGuids}&sort=year&dir=desc&fl=year,taxon_concept_lsid`\n            + (speciesListId ? `&fq=species_list_uid:${speciesListId}` : '');\n\n            const json = await this._getJson(url);\n\n\n            const taxonConcepts = Object.values(json.occurrences.reduce((acc, cur) => {\n                const { taxonConceptID, year } = cur;\n                if (!acc[taxonConceptID] || year > acc[taxonConceptID].year) {\n                    acc[taxonConceptID] = { taxonConceptID, year };\n                }\n                return acc;\n            }, {}));\n\n\n        occurrenceCountDTO.forEach(item => {\n            const matchingConcept = taxonConcepts.find(concept => concept.taxonConceptID === item.additional.taxonGuid);\n            if (matchingConcept) {\n                item.year = matchingConcept.year;\n            }\n        })\n        return occurrenceCountDTO;\n    }\n\n    /** @private */\n    _getJson(url) {\n        return getJson(url)\n    }\n}","import { getJson } from '../util/index.js'\nimport { CONFIG } from '../config/index.js'\n\n/**\n* @private\n*/\nexport class ListsWS {\n\n    async getSpeciesList(speciesListId) {\n        let url = `${CONFIG.URL_LISTS_WS}/ws/speciesListItems/${speciesListId}`;\n        let json = await getJson(url);\n        return this._buildSpeciesListDTO(json);\n    }\n\n\n    /**\n    * @private\n    */\n    _buildSpeciesListDTO(json) {\n        return json;\n    }\n\n}","import { RecordsWS } from '../services/records-ws.js'\nimport { ListsWS } from '../services/lists-ws.js'\nimport {rejectInvalidRequest, ERROR_MESSAGES} from '../validation/index.js'\nimport {SPECIES_LIST} from '../config/index.js'\n\n/**\n * @classdesc Represents the NBN Places SDK. In Beta!!\n * @memberof NBNAtlas\n */\n export class Places {\n\n    /**\n     * Create a place.\n     * @param {number} layerId - The NBN layer id.\n    */\n    constructor(layerId) {\n        this.layerId = layerId;\n        this.recordsWS = new RecordsWS();\n        this.listsWS = new ListsWS();\n    }\n\n    /**\n     * Returns the species count grouped by species group.\n     * @async\n     * @example\n     * NBNAtlas.places(NBNAtlas.LAYERS.BEAUTIFUL_BURIAL_GROUNDS)\n     *                  .getSpeciesCountByGroup(['Croydon Cemetery'],\n     *                                          NBNAtlas.SPECIES_LIST.BEAUTIFUL_BURIAL_GROUNDS_SEEK_ADVICE)\n     * .then(data=>\n     *   console.log(JSON.stringify(data))\n     *  );\n     *\n     * @param {string[]} placeNames - Array of place names.\n     * @param {string} [selectedspeciesListId] - The id of a species list for which a grouped count is also returned.\n     * @return {Promise<Array<NBNAtlas.typedefs.SpeciesCountByGroup>>}\n     */\n    async getSpeciesCountByGroup(placeNames, selectedspeciesListId) {\n        if (!placeNames || !placeNames.length) {\n            return rejectInvalidRequest(ERROR_MESSAGES.MISSING_PLACE_NAME);\n        }\n       \n        const speciesCountByGroupDTO = await this.recordsWS.getSpeciesCountByGroup({layerId:this.layerId, placeNames});\n\n        let selectedSpeciesCountByGroupDTO = selectedspeciesListId ? \n            await this.recordsWS.getSpeciesCountByGroupForSpeciesList({layerId:this.layerId, placeNames, speciesListId:selectedspeciesListId}) : [];\n      \n        return this._buildSpeciesCountByGroupResult(speciesCountByGroupDTO, selectedSpeciesCountByGroupDTO);\n    }\n\n    /**\n     * Returns the occurrence counts.\n     * @example\n     * NBNAtlas.places(NBNAtlas.LAYERS.BEAUTIFUL_BURIAL_GROUNDS).getOccurrenceCount(['Argyll Biological Records Centre'])\n     * .then(data=>\n     *   console.log(JSON.stringify(data))\n     *  );\n     *\n     * @param {string[]} placeNames - Array of place names.\n     * @return {Promise<Array<NBNAtlas.typedefs.OccurrenceCount>>}\n     */\n    async getOccurrenceCount(placeNames) {\n        if (!placeNames) {\n            return rejectInvalidRequest(ERROR_MESSAGES.MISSING_PLACE_NAME);\n        }\n        \n        let result = [];\n        const occurrenceCountDTO = await this.recordsWS.getOccurrenceCount({layerId:this.layerId, placeNames});\n        if (occurrenceCountDTO) {\n            const sensitiveInWalesDTO = await this.listsWS.getSpeciesList(SPECIES_LIST.SENSITIVE_IN_WALES);\n            const sensitiveInEnglandDTO = await this.listsWS.getSpeciesList(SPECIES_LIST.SENSITIVE_IN_ENGLAND);\n\n            result = this._buildOccurrenceCountResult(occurrenceCountDTO, sensitiveInWalesDTO, sensitiveInEnglandDTO);\n        }\n\n        return result;\n    }\n\n    /**\n    * Returns the occurrence counts for a species list.\n    * @async\n    * @example\n    * NBNAtlas.places(NBNAtlas.LAYERS.BEAUTIFUL_BURIAL_GROUNDS)\n     *                  .getOccurrenceCountForSpeciesList(['Argyll Biological Records Centre'],\n     *                                                     NBNAtlas.SPECIES_LIST.BEAUTIFUL_BURIAL_GROUNDS_SEEK_ADVICE)\n     * .then(data=>\n     *   console.log(JSON.stringify(data))\n     *  );\n     *\n     * @param {string[]} placeNames - Array of place names.\n    * @param {string} speciesListId - The species list id.\n    * @return {Promise<Array<NBNAtlas.typedefs.OccurrenceCount>>}\n    */\n    async getOccurrenceCountForSpeciesList(placeNames, speciesListId) {\n        if (!placeNames) {\n            return rejectInvalidRequest(ERROR_MESSAGES.MISSING_PLACE_NAME);\n        }\n        if (!speciesListId) {\n            return rejectInvalidRequest(ERROR_MESSAGES.MISSING_SPECIES_LIST_ID);\n        }\n        const speciesListDTO = await this.listsWS.getSpeciesList(speciesListId);\n\n        let result = [];\n        const occurrenceCountDTO = await this.recordsWS.getOccurrenceCountForSpeciesList({layerId:this.layerId, placeNames, speciesListId});\n        if (occurrenceCountDTO && occurrenceCountDTO.length) {\n            const sensitiveInWalesDTO = await this.listsWS.getSpeciesList(SPECIES_LIST.SENSITIVE_IN_WALES);\n            const sensitiveInEnglandDTO = await this.listsWS.getSpeciesList(SPECIES_LIST.SENSITIVE_IN_ENGLAND);\n\n            result = this._buildOccurrenceCountForSpeciesListResult(speciesListDTO, occurrenceCountDTO, sensitiveInWalesDTO, sensitiveInEnglandDTO);\n        }\n\n        return result;\n    }\n\n\n\n    /**\n     * @private\n     */\n    _buildSpeciesCountByGroupResult(speciesCountByGroupDTO, selectedSpeciesCountByGroupDTO) {\n        const map = new Map();\n\n        speciesCountByGroupDTO.forEach(it => map.set(it.name,\n            {\n                speciesGroup: it.name,\n                speciesCount: it.speciesCount,\n                selectedSpeciesCount: 0\n            }\n        ));\n\n        selectedSpeciesCountByGroupDTO.forEach(it => {\n            let val = map.get(it.name);\n\n            if (!val) {\n                map.set(it.name, {\n                    speciesGroup: it.name,\n                    speciesCount: 0,\n                    selectedSpeciesCount: it.speciesCount\n                });\n            } else {\n                val = {\n                    ...val,\n                    selectedSpeciesCount: it.speciesCount\n                };\n            }\n\n        });\n\n        return [...map.values()];\n\n    }\n\n\n    /**\n     * @private\n     */\n    _buildOccurrenceCountResult(occurrenceCountDTO, sensitiveInEnglandDTO, sensitiveInWalesDTO) {\n        if (!occurrenceCountDTO) {\n            return {}\n        }\n        const england = this._sensitiveSpeciesJSONToMap(sensitiveInEnglandDTO);\n        const wales = this._sensitiveSpeciesJSONToMap(sensitiveInWalesDTO);\n        return occurrenceCountDTO.map(it => (\n            {\n                scientificName: it.additional.scientificName,\n                commonName: it.additional.commonName,\n                taxonGuid: it.additional.taxonGuid,\n                count: it.count,\n                sensitiveInEngland: !!england[it.additional.taxonGuid],\n                sensitiveInWales: !!wales[it.additional.taxonGuid]\n            }\n        ));\n    }\n\n    /**\n     * @private\n     */\n    _buildOccurrenceCountForSpeciesListResult(speciesListDTO, occurrenceCountDTO, sensitiveInEnglandDTO, sensitiveInWalesDTO) {\n        if (!occurrenceCountDTO || occurrenceCountDTO.length === 0) {\n            return {}\n        }\n        const england = this._sensitiveSpeciesJSONToMap(sensitiveInEnglandDTO);\n        const wales = this._sensitiveSpeciesJSONToMap(sensitiveInWalesDTO);\n        const result =  speciesListDTO.map(it => {\n            let countAndLastRecorded = this._getOccurrenceCountAndLastRecorded(it.lsid, occurrenceCountDTO);\n\n            return(\n                {\n                scientificName:it.scientificName,\n                commonName:it.commonName,\n                taxonGuid:it.lsid,\n                lastRecorded:countAndLastRecorded.lastRecorded,\n                count:countAndLastRecorded.count,\n                sensitiveInEngland:!!england[it.lsid],\n                sensitiveInWales:!!wales[it.lsid]\n                }\n            )\n        });\n\n        const batCount = occurrenceCountDTO[occurrenceCountDTO.length-1];\n        if (batCount.additional.scientificName===\"Chiroptera\"){\n            result.push({\n                scientificName:batCount.additional.scientificName,\n                commonName:batCount.additional.commonName,\n                taxonGuid:batCount.additional.taxonGuid,\n                lastRecorded:batCount.year,\n                count:batCount.count,\n                sensitiveInEngland:true,\n                sensitiveInWales:false\n            })\n        }\n        return result;\n    }\n\n    /**\n    * @private \n    */\n    _getOccurrenceCountAndLastRecorded(taxonGuid, occurrenceCountDTO) {\n        let result = {count:0,lastRecorded:0}\n\n        occurrenceCountDTO.some(it => {\n            if (it.additional.taxonGuid === taxonGuid) {\n                result = {\n                    count:it.count,\n                    lastRecorded:it.year\n                }\n                return true;\n            }\n            return false;\n        });\n        return result;\n    }\n\n    /**\n     * @private\n     */\n    _sensitiveSpeciesJSONToMap(json) {\n        return json.reduce((map, obj) => {\n            map[obj.lsid] = obj;\n            return map;\n        }, {});\n    }\n\n   \n\n}\n\nexport var places = function (layerId) {\n\treturn new Places(layerId);\n};\n","import { SpeciesWS } from '../services/species-ws.js'\nimport { rejectInvalidRequest, ERROR_MESSAGES } from '../validation/index.js'\nimport { SPECIES_LIST, LAYERS } from '../config/index.js'\nimport { Places } from './places.js'\n\n/**\n * @classdesc Represents the Beautiful Burial Grounds SDK.\n * @memberof NBNAtlas\n */\nexport class BBG {\n\n    constructor() {\n        this.places = new Places(LAYERS.BEAUTIFUL_BURIAL_GROUNDS)\n        this.speciesWS = new SpeciesWS();\n    }\n\n    /**\n     * @description Returns the seek advice data.\n     * @async\n     * @example\n     * NBNAtlas.bbg.getSeekAdviceData('Croydon Cemetery')\n     * .then(data=>\n     *   console.log(JSON.stringify(data))\n     *  );\n     * \n     * @param {string} placeName - The unique name of the place\n     * @return {Promise<Array<NBNAtlas.OccurrenceCount>>}\n     *   \n     */\n    async getSeekAdviceData(placeName) {\n        if (!placeName) {\n            return rejectInvalidRequest(ERROR_MESSAGES.MISSING_PLACE_NAME);\n        }\n        return this.places.getOccurrenceCountForSpeciesList([placeName], SPECIES_LIST.BEAUTIFUL_BURIAL_GROUNDS_SEEK_ADVICE)\n    }\n\n    /**\n     * @description Returns the seek advice data.\n     * @async\n     * @example\n     * NBNAtlas.bbg.getSeekAdviceDataForAssetID('615214')\n     * .then(data=>\n     *   console.log(JSON.stringify(data))\n     * );\n     *\n     * @param {string} assetID\n     * @return {Promise<Array<NBNAtlas.OccurrenceCount>>}\n     *\n     */\n    async getSeekAdviceDataForAssetID(assetID) {\n        if (!assetID) {\n            return rejectInvalidRequest(ERROR_MESSAGES.MISSING_ASSET_ID);\n        }\n        let asset = await this.speciesWS.getBBGPlacesForAssetID(assetID);\n        return this.places.getOccurrenceCountForSpeciesList(asset.places, SPECIES_LIST.BEAUTIFUL_BURIAL_GROUNDS_SEEK_ADVICE);\n    }\n\n    /**\n     * @description Returns the digest table data.\n     * @async\n     * @example\n     * NBNAtlas.bbg.getDigestTableData('Croydon Cemetery')\n     * .then(data=>\n     *   console.log(JSON.stringify(data))\n     *  );\n     *\n     * @param {string} placeName - The unique name of the place\n     * @return {Promise<Array<NBNAtlas.SpeciesCountByGroup>>}\n    */\n    async getDigestTableData(placeName) {\n        if (!placeName) {\n            return rejectInvalidRequest(ERROR_MESSAGES.MISSING_PLACE_NAME);\n        }\n        return this.places.getSpeciesCountByGroup([placeName], SPECIES_LIST.BEAUTIFUL_BURIAL_GROUNDS_DIGEST_TABLE)\n    }\n\n    /**\n     * @description Returns the digest table data.\n     * @async\n     * @example\n     * NBNAtlas.bbg.getDigestTableDataForAssetID('615214')\n     * .then(data=>\n     *   console.log(JSON.stringify(data))\n     *  );\n     *\n     * @param {string} assetID\n     * @return {Promise<Array<NBNAtlas.SpeciesCountByGroup>>}\n     */\n    async getDigestTableDataForAssetID(assetID) {\n        if (!assetID) {\n            return rejectInvalidRequest(ERROR_MESSAGES.MISSING_ASSET_ID);\n        }\n        let asset = await this.speciesWS.getBBGPlacesForAssetID(assetID);\n        return this.places.getSpeciesCountByGroup(asset.places, SPECIES_LIST.BEAUTIFUL_BURIAL_GROUNDS_DIGEST_TABLE)\n    }\n\n    /**\n     * @description Returns a BBG site or place.\n     * @async\n     * @example\n     * NBNAtlas.bbg.getPlace('Baildon: St James')\n     * .then(data=>\n     *   console.log(JSON.stringify(data))\n     *  );\n     *\n     * @param {string} placeName - The unique name of the place\n     * @return {Promise<NBNAtlas.BBGPlace>}\n    */\n    async getPlace(placeName) {\n        if (!placeName) {\n            return rejectInvalidRequest(ERROR_MESSAGES.MISSING_PLACE_NAME);\n        }\n        return this.speciesWS.getBBGPlace(placeName);\n    }\n\n}\n\n\nexport const bbg = new BBG();"],"names":["async","getJson","url","controller","AbortController","setTimeout","abort","response","fetch","signal","status","Promise","reject","message","statusText","body","data","json","encodeAndJoin","items","separator","map","it","encodeURIComponent","join","CONFIG","URL_RECORDS_WS","URL_SPECIES_WS","URL_LISTS_WS","LAYERS","BEAUTIFUL_BURIAL_GROUNDS","SPECIES_LIST","BEAUTIFUL_BURIAL_GROUNDS_SEEK_ADVICE","BEAUTIFUL_BURIAL_GROUNDS_DIGEST_TABLE","SENSITIVE_IN_ENGLAND","SENSITIVE_IN_WALES","SpeciesWS","placeName","this","_buildGetPlaceUrl","_getJson","_buildBBGPlaceDTO","assetID","_buildBBGAssetDTO","result","searchResults","results","assetid_s","name","bbg_name_s","length","assetName","name_s","places","ERROR_MESSAGES","rejectInvalidRequest","RecordsWS","layerId","placeNames","_buildSpeciesCountByGroupDTO","speciesListId","occurrenceCountDTO","_buildOccurrenceCountDTO","_addLastOccurrenceYear","undefined","batCount","_getBatOccurrenceCount","push","occurrences","count","totalRecords","year","additional","scientificName","commonName","taxonGuid","facetResults","fieldResult","label","split","taxnConceptGuids","item","taxonConcepts","Object","values","reduce","acc","cur","taxonConceptID","forEach","matchingConcept","find","concept","ListsWS","_buildSpeciesListDTO","Places","constructor","recordsWS","listsWS","selectedspeciesListId","speciesCountByGroupDTO","getSpeciesCountByGroup","selectedSpeciesCountByGroupDTO","getSpeciesCountByGroupForSpeciesList","_buildSpeciesCountByGroupResult","getOccurrenceCount","sensitiveInWalesDTO","getSpeciesList","sensitiveInEnglandDTO","_buildOccurrenceCountResult","speciesListDTO","getOccurrenceCountForSpeciesList","_buildOccurrenceCountForSpeciesListResult","Map","set","speciesGroup","speciesCount","selectedSpeciesCount","val","get","england","_sensitiveSpeciesJSONToMap","wales","sensitiveInEngland","sensitiveInWales","countAndLastRecorded","_getOccurrenceCountAndLastRecorded","lsid","lastRecorded","some","obj","BBG","speciesWS","asset","getBBGPlacesForAssetID","getBBGPlace","bbg"],"mappings":"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"}